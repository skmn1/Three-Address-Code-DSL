/*
 * generated by Xtext 2.25.0
 */
package fr.ensma.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.ensma.dsl.ide.contentassist.antlr.internal.InternalThreeAddressCodeParser;
import fr.ensma.dsl.services.ThreeAddressCodeGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ThreeAddressCodeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ThreeAddressCodeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ThreeAddressCodeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFunctionDefAccess().getAlternatives_6(), "rule__FunctionDef__Alternatives_6");
			builder.put(grammarAccess.getFunctionParamAccess().getAlternatives(), "rule__FunctionParam__Alternatives");
			builder.put(grammarAccess.getFunctionArgumentAccess().getAlternatives(), "rule__FunctionArgument__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getAlternatives(), "rule__DataType__Alternatives");
			builder.put(grammarAccess.getAssignOperationAccess().getAlternatives_4(), "rule__AssignOperation__Alternatives_4");
			builder.put(grammarAccess.getBooleanExpressionAccess().getAlternatives(), "rule__BooleanExpression__Alternatives");
			builder.put(grammarAccess.getArithmeticOperationAccess().getAlternatives(), "rule__ArithmeticOperation__Alternatives");
			builder.put(grammarAccess.getLogicalOperationAccess().getAlternatives(), "rule__LogicalOperation__Alternatives");
			builder.put(grammarAccess.getFunctionDefAccess().getGroup(), "rule__FunctionDef__Group__0");
			builder.put(grammarAccess.getFunctionDefAccess().getGroup_3(), "rule__FunctionDef__Group_3__0");
			builder.put(grammarAccess.getFunctionDefAccess().getGroup_6_0(), "rule__FunctionDef__Group_6_0__0");
			builder.put(grammarAccess.getFunctionDefAccess().getGroup_6_4(), "rule__FunctionDef__Group_6_4__0");
			builder.put(grammarAccess.getFunctionDefAccess().getGroup_6_5(), "rule__FunctionDef__Group_6_5__0");
			builder.put(grammarAccess.getFunctionDefAccess().getGroup_6_6(), "rule__FunctionDef__Group_6_6__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
			builder.put(grammarAccess.getFunctionCallAccess().getGroup_3(), "rule__FunctionCall__Group_3__0");
			builder.put(grammarAccess.getFunctionParamAccess().getGroup_0(), "rule__FunctionParam__Group_0__0");
			builder.put(grammarAccess.getFunctionParamAccess().getGroup_1(), "rule__FunctionParam__Group_1__0");
			builder.put(grammarAccess.getFunctionArgumentAccess().getGroup_0(), "rule__FunctionArgument__Group_0__0");
			builder.put(grammarAccess.getFunctionArgumentAccess().getGroup_0_1(), "rule__FunctionArgument__Group_0_1__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup_0(), "rule__DataType__Group_0__0");
			builder.put(grammarAccess.getDataTypeAccess().getGroup_1(), "rule__DataType__Group_1__0");
			builder.put(grammarAccess.getStructAccess().getGroup(), "rule__Struct__Group__0");
			builder.put(grammarAccess.getGotoAccess().getGroup(), "rule__Goto__Group__0");
			builder.put(grammarAccess.getLabelAccess().getGroup(), "rule__Label__Group__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getAssignOperationAccess().getGroup(), "rule__AssignOperation__Group__0");
			builder.put(grammarAccess.getAssignOperationAccess().getGroup_2(), "rule__AssignOperation__Group_2__0");
			builder.put(grammarAccess.getAssignOperationAccess().getGroup_4_3(), "rule__AssignOperation__Group_4_3__0");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getBooleanExpressionAccess().getGroup_0(), "rule__BooleanExpression__Group_0__0");
			builder.put(grammarAccess.getTACAccess().getTacAssignment(), "rule__TAC__TacAssignment");
			builder.put(grammarAccess.getFunctionDefAccess().getFunctionAssignment_1(), "rule__FunctionDef__FunctionAssignment_1");
			builder.put(grammarAccess.getFunctionDefAccess().getFunctionparamAssignment_3_0(), "rule__FunctionDef__FunctionparamAssignment_3_0");
			builder.put(grammarAccess.getFunctionDefAccess().getStructAssignment_6_0_0(), "rule__FunctionDef__StructAssignment_6_0_0");
			builder.put(grammarAccess.getFunctionDefAccess().getLabelAssignment_6_1(), "rule__FunctionDef__LabelAssignment_6_1");
			builder.put(grammarAccess.getFunctionDefAccess().getGotoAssignment_6_2(), "rule__FunctionDef__GotoAssignment_6_2");
			builder.put(grammarAccess.getFunctionDefAccess().getIfAssignment_6_3(), "rule__FunctionDef__IfAssignment_6_3");
			builder.put(grammarAccess.getFunctionDefAccess().getFunctionCallAssignment_6_5_0(), "rule__FunctionDef__FunctionCallAssignment_6_5_0");
			builder.put(grammarAccess.getFunctionDefAccess().getAssignOpAssignment_6_6_0(), "rule__FunctionDef__AssignOpAssignment_6_6_0");
			builder.put(grammarAccess.getFunctionCallAccess().getFunctionCallAssignment_1(), "rule__FunctionCall__FunctionCallAssignment_1");
			builder.put(grammarAccess.getFunctionCallAccess().getFunctionArgumentAssignment_3_0(), "rule__FunctionCall__FunctionArgumentAssignment_3_0");
			builder.put(grammarAccess.getFunctionParamAccess().getStructAssignment_0_1(), "rule__FunctionParam__StructAssignment_0_1");
			builder.put(grammarAccess.getFunctionParamAccess().getDatatypeAssignment_1_0(), "rule__FunctionParam__DatatypeAssignment_1_0");
			builder.put(grammarAccess.getFunctionParamAccess().getNameAssignment_1_2(), "rule__FunctionParam__NameAssignment_1_2");
			builder.put(grammarAccess.getAssignOperationAccess().getFunctionCallAssignment_4_5(), "rule__AssignOperation__FunctionCallAssignment_4_5");
			builder.put(grammarAccess.getFunctionAccess().getNameAssignment_1(), "rule__Function__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ThreeAddressCodeGrammarAccess grammarAccess;

	@Override
	protected InternalThreeAddressCodeParser createParser() {
		InternalThreeAddressCodeParser result = new InternalThreeAddressCodeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ThreeAddressCodeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ThreeAddressCodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
