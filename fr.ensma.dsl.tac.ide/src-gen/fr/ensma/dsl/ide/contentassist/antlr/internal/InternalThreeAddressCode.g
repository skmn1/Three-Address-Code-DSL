/*
 * generated by Xtext 2.25.0
 */
grammar InternalThreeAddressCode;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package fr.ensma.dsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package fr.ensma.dsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import fr.ensma.dsl.services.ThreeAddressCodeGrammarAccess;

}
@parser::members {
	private ThreeAddressCodeGrammarAccess grammarAccess;

	public void setGrammarAccess(ThreeAddressCodeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTAC
entryRuleTAC
:
{ before(grammarAccess.getTACRule()); }
	 ruleTAC
{ after(grammarAccess.getTACRule()); } 
	 EOF 
;

// Rule TAC
ruleTAC 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTACAccess().getTacAssignment()); }
		(rule__TAC__TacAssignment)*
		{ after(grammarAccess.getTACAccess().getTacAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionDef
entryRuleFunctionDef
:
{ before(grammarAccess.getFunctionDefRule()); }
	 ruleFunctionDef
{ after(grammarAccess.getFunctionDefRule()); } 
	 EOF 
;

// Rule FunctionDef
ruleFunctionDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionDefAccess().getGroup()); }
		(rule__FunctionDef__Group__0)
		{ after(grammarAccess.getFunctionDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionParam
entryRuleFunctionParam
:
{ before(grammarAccess.getFunctionParamRule()); }
	 ruleFunctionParam
{ after(grammarAccess.getFunctionParamRule()); } 
	 EOF 
;

// Rule FunctionParam
ruleFunctionParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionParamAccess().getAlternatives()); }
		(rule__FunctionParam__Alternatives)
		{ after(grammarAccess.getFunctionParamAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionArgument
entryRuleFunctionArgument
:
{ before(grammarAccess.getFunctionArgumentRule()); }
	 ruleFunctionArgument
{ after(grammarAccess.getFunctionArgumentRule()); } 
	 EOF 
;

// Rule FunctionArgument
ruleFunctionArgument 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionArgumentAccess().getAlternatives()); }
		(rule__FunctionArgument__Alternatives)
		{ after(grammarAccess.getFunctionArgumentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDataType
entryRuleDataType
:
{ before(grammarAccess.getDataTypeRule()); }
	 ruleDataType
{ after(grammarAccess.getDataTypeRule()); } 
	 EOF 
;

// Rule DataType
ruleDataType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDataTypeAccess().getAlternatives()); }
		(rule__DataType__Alternatives)
		{ after(grammarAccess.getDataTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStruct
entryRuleStruct
:
{ before(grammarAccess.getStructRule()); }
	 ruleStruct
{ after(grammarAccess.getStructRule()); } 
	 EOF 
;

// Rule Struct
ruleStruct 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStructAccess().getGroup()); }
		(rule__Struct__Group__0)
		{ after(grammarAccess.getStructAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGoto
entryRuleGoto
:
{ before(grammarAccess.getGotoRule()); }
	 ruleGoto
{ after(grammarAccess.getGotoRule()); } 
	 EOF 
;

// Rule Goto
ruleGoto 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGotoAccess().getGroup()); }
		(rule__Goto__Group__0)
		{ after(grammarAccess.getGotoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLabel
entryRuleLabel
:
{ before(grammarAccess.getLabelRule()); }
	 ruleLabel
{ after(grammarAccess.getLabelRule()); } 
	 EOF 
;

// Rule Label
ruleLabel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLabelAccess().getGroup()); }
		(rule__Label__Group__0)
		{ after(grammarAccess.getLabelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignOperation
entryRuleAssignOperation
:
{ before(grammarAccess.getAssignOperationRule()); }
	 ruleAssignOperation
{ after(grammarAccess.getAssignOperationRule()); } 
	 EOF 
;

// Rule AssignOperation
ruleAssignOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignOperationAccess().getGroup()); }
		(rule__AssignOperation__Group__0)
		{ after(grammarAccess.getAssignOperationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
		(rule__BooleanExpression__Alternatives)
		{ after(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicalOperation
entryRuleLogicalOperation
:
{ before(grammarAccess.getLogicalOperationRule()); }
	 ruleLogicalOperation
{ after(grammarAccess.getLogicalOperationRule()); } 
	 EOF 
;

// Rule LogicalOperation
ruleLogicalOperation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicalOperationAccess().getAlternatives()); }
		(rule__LogicalOperation__Alternatives)
		{ after(grammarAccess.getLogicalOperationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Alternatives_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getGroup_6_0()); }
		(rule__FunctionDef__Group_6_0__0)
		{ after(grammarAccess.getFunctionDefAccess().getGroup_6_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefAccess().getLabelAssignment_6_1()); }
		(rule__FunctionDef__LabelAssignment_6_1)
		{ after(grammarAccess.getFunctionDefAccess().getLabelAssignment_6_1()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefAccess().getGotoAssignment_6_2()); }
		(rule__FunctionDef__GotoAssignment_6_2)
		{ after(grammarAccess.getFunctionDefAccess().getGotoAssignment_6_2()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefAccess().getIfAssignment_6_3()); }
		(rule__FunctionDef__IfAssignment_6_3)
		{ after(grammarAccess.getFunctionDefAccess().getIfAssignment_6_3()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefAccess().getGroup_6_4()); }
		(rule__FunctionDef__Group_6_4__0)
		{ after(grammarAccess.getFunctionDefAccess().getGroup_6_4()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefAccess().getGroup_6_5()); }
		(rule__FunctionDef__Group_6_5__0)
		{ after(grammarAccess.getFunctionDefAccess().getGroup_6_5()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionDefAccess().getGroup_6_6()); }
		(rule__FunctionDef__Group_6_6__0)
		{ after(grammarAccess.getFunctionDefAccess().getGroup_6_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionParamAccess().getGroup_0()); }
		(rule__FunctionParam__Group_0__0)
		{ after(grammarAccess.getFunctionParamAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionParamAccess().getGroup_1()); }
		(rule__FunctionParam__Group_1__0)
		{ after(grammarAccess.getFunctionParamAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionArgumentAccess().getGroup_0()); }
		(rule__FunctionArgument__Group_0__0)
		{ after(grammarAccess.getFunctionArgumentAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getFunctionArgumentAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getFunctionArgumentAccess().getINTTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getGroup_0()); }
		(rule__DataType__Group_0__0)
		{ after(grammarAccess.getDataTypeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getGroup_1()); }
		(rule__DataType__Group_1__0)
		{ after(grammarAccess.getDataTypeAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getUint8_tKeyword_2()); }
		'uint8_t'
		{ after(grammarAccess.getDataTypeAccess().getUint8_tKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getInt16_tKeyword_3()); }
		'int16_t'
		{ after(grammarAccess.getDataTypeAccess().getInt16_tKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Alternatives_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_4_0()); }
		RULE_ID
		{ after(grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_4_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperationAccess().getSTRINGTerminalRuleCall_4_1()); }
		RULE_STRING
		{ after(grammarAccess.getAssignOperationAccess().getSTRINGTerminalRuleCall_4_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperationAccess().getINTTerminalRuleCall_4_2()); }
		RULE_INT
		{ after(grammarAccess.getAssignOperationAccess().getINTTerminalRuleCall_4_2()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperationAccess().getGroup_4_3()); }
		(rule__AssignOperation__Group_4_3__0)
		{ after(grammarAccess.getAssignOperationAccess().getGroup_4_3()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperationAccess().getCLOBBERKeyword_4_4()); }
		'{CLOBBER}'
		{ after(grammarAccess.getAssignOperationAccess().getCLOBBERKeyword_4_4()); }
	)
	|
	(
		{ before(grammarAccess.getAssignOperationAccess().getFunctionCallAssignment_4_5()); }
		(rule__AssignOperation__FunctionCallAssignment_4_5)
		{ after(grammarAccess.getAssignOperationAccess().getFunctionCallAssignment_4_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getGroup_0()); }
		(rule__BooleanExpression__Group_0__0)
		{ after(grammarAccess.getBooleanExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanExpressionAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getBooleanExpressionAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicalOperation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicalOperationAccess().getAndKeyword_0()); }
		'and'
		{ after(grammarAccess.getLogicalOperationAccess().getAndKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getOrKeyword_1()); }
		'or'
		{ after(grammarAccess.getLogicalOperationAccess().getOrKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getEqualsSignLessThanSignKeyword_2()); }
		'=<'
		{ after(grammarAccess.getLogicalOperationAccess().getEqualsSignLessThanSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getLessThanSignKeyword_3()); }
		'<'
		{ after(grammarAccess.getLogicalOperationAccess().getLessThanSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getGreaterThanSignKeyword_4()); }
		'>'
		{ after(grammarAccess.getLogicalOperationAccess().getGreaterThanSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getEqualsSignGreaterThanSignKeyword_5()); }
		'=>'
		{ after(grammarAccess.getLogicalOperationAccess().getEqualsSignGreaterThanSignKeyword_5()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getEqualsSignEqualsSignKeyword_6()); }
		'=='
		{ after(grammarAccess.getLogicalOperationAccess().getEqualsSignEqualsSignKeyword_6()); }
	)
	|
	(
		{ before(grammarAccess.getLogicalOperationAccess().getExclamationMarkEqualsSignKeyword_7()); }
		'!='
		{ after(grammarAccess.getLogicalOperationAccess().getExclamationMarkEqualsSignKeyword_7()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__0__Impl
	rule__FunctionDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getFunctionDefAction_0()); }
	()
	{ after(grammarAccess.getFunctionDefAccess().getFunctionDefAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__1__Impl
	rule__FunctionDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getFunctionAssignment_1()); }
	(rule__FunctionDef__FunctionAssignment_1)
	{ after(grammarAccess.getFunctionDefAccess().getFunctionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__2__Impl
	rule__FunctionDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunctionDefAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__3__Impl
	rule__FunctionDef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getGroup_3()); }
	(rule__FunctionDef__Group_3__0)*
	{ after(grammarAccess.getFunctionDefAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__4__Impl
	rule__FunctionDef__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionDefAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__5__Impl
	rule__FunctionDef__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getLeftCurlyBracketKeyword_5()); }
	'{'
	{ after(grammarAccess.getFunctionDefAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__6__Impl
	rule__FunctionDef__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getAlternatives_6()); }
	(rule__FunctionDef__Alternatives_6)*
	{ after(grammarAccess.getFunctionDefAccess().getAlternatives_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__7__Impl
	rule__FunctionDef__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getReturnKeyword_7()); }
	('return;')?
	{ after(grammarAccess.getFunctionDefAccess().getReturnKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getFunctionDefAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDef__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_3__0__Impl
	rule__FunctionDef__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getFunctionparamAssignment_3_0()); }
	(rule__FunctionDef__FunctionparamAssignment_3_0)
	{ after(grammarAccess.getFunctionDefAccess().getFunctionparamAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getCommaKeyword_3_1()); }
	(',')?
	{ after(grammarAccess.getFunctionDefAccess().getCommaKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDef__Group_6_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_6_0__0__Impl
	rule__FunctionDef__Group_6_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getStructAssignment_6_0_0()); }
	(rule__FunctionDef__StructAssignment_6_0_0)
	{ after(grammarAccess.getFunctionDefAccess().getStructAssignment_6_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_6_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getSemicolonKeyword_6_0_1()); }
	';'
	{ after(grammarAccess.getFunctionDefAccess().getSemicolonKeyword_6_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDef__Group_6_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_6_4__0__Impl
	rule__FunctionDef__Group_6_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getNumberSignKeyword_6_4_0()); }
	'#'
	{ after(grammarAccess.getFunctionDefAccess().getNumberSignKeyword_6_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_6_4__1__Impl
	rule__FunctionDef__Group_6_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getDEBUGKeyword_6_4_1()); }
	'DEBUG'
	{ after(grammarAccess.getFunctionDefAccess().getDEBUGKeyword_6_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_6_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getBEGIN_STMTKeyword_6_4_2()); }
	'BEGIN_STMT'
	{ after(grammarAccess.getFunctionDefAccess().getBEGIN_STMTKeyword_6_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDef__Group_6_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_6_5__0__Impl
	rule__FunctionDef__Group_6_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getFunctionCallAssignment_6_5_0()); }
	(rule__FunctionDef__FunctionCallAssignment_6_5_0)
	{ after(grammarAccess.getFunctionDefAccess().getFunctionCallAssignment_6_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_6_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getSemicolonKeyword_6_5_1()); }
	';'
	{ after(grammarAccess.getFunctionDefAccess().getSemicolonKeyword_6_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDef__Group_6_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_6_6__0__Impl
	rule__FunctionDef__Group_6_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getAssignOpAssignment_6_6_0()); }
	(rule__FunctionDef__AssignOpAssignment_6_6_0)
	{ after(grammarAccess.getFunctionDefAccess().getAssignOpAssignment_6_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionDef__Group_6_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__Group_6_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionDefAccess().getSemicolonKeyword_6_6_1()); }
	';'
	{ after(grammarAccess.getFunctionDefAccess().getSemicolonKeyword_6_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
	()
	{ after(grammarAccess.getFunctionCallAccess().getFunctionCallAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFunctionCallAssignment_1()); }
	(rule__FunctionCall__FunctionCallAssignment_1)
	{ after(grammarAccess.getFunctionCallAccess().getFunctionCallAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__3__Impl
	rule__FunctionCall__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getGroup_3()); }
	(rule__FunctionCall__Group_3__0)*
	{ after(grammarAccess.getFunctionCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__0__Impl
	rule__FunctionCall__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFunctionArgumentAssignment_3_0()); }
	(rule__FunctionCall__FunctionArgumentAssignment_3_0)
	{ after(grammarAccess.getFunctionCallAccess().getFunctionArgumentAssignment_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1()); }
	(',')?
	{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionParam__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParam__Group_0__0__Impl
	rule__FunctionParam__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParamAccess().getFunctionParamAction_0_0()); }
	()
	{ after(grammarAccess.getFunctionParamAccess().getFunctionParamAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParam__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParamAccess().getStructAssignment_0_1()); }
	(rule__FunctionParam__StructAssignment_0_1)
	{ after(grammarAccess.getFunctionParamAccess().getStructAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionParam__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParam__Group_1__0__Impl
	rule__FunctionParam__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParamAccess().getDatatypeAssignment_1_0()); }
	(rule__FunctionParam__DatatypeAssignment_1_0)
	{ after(grammarAccess.getFunctionParamAccess().getDatatypeAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParam__Group_1__1__Impl
	rule__FunctionParam__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParamAccess().getAsteriskKeyword_1_1()); }
	('*')?
	{ after(grammarAccess.getFunctionParamAccess().getAsteriskKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionParam__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionParamAccess().getNameAssignment_1_2()); }
	(rule__FunctionParam__NameAssignment_1_2)
	{ after(grammarAccess.getFunctionParamAccess().getNameAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgument__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionArgument__Group_0__0__Impl
	rule__FunctionArgument__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionArgumentAccess().getFunctionArgumentAction_0_0()); }
	()
	{ after(grammarAccess.getFunctionArgumentAccess().getFunctionArgumentAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionArgument__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionArgumentAccess().getGroup_0_1()); }
	(rule__FunctionArgument__Group_0_1__0)
	{ after(grammarAccess.getFunctionArgumentAccess().getGroup_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionArgument__Group_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionArgument__Group_0_1__0__Impl
	rule__FunctionArgument__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Group_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionArgumentAccess().getAmpersandKeyword_0_1_0()); }
	('&')?
	{ after(grammarAccess.getFunctionArgumentAccess().getAmpersandKeyword_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Group_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionArgument__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionArgument__Group_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionArgumentAccess().getIDTerminalRuleCall_0_1_1()); }
	RULE_ID
	{ after(grammarAccess.getFunctionArgumentAccess().getIDTerminalRuleCall_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group_0__0__Impl
	rule__DataType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getDataTypeAction_0_0()); }
	()
	{ after(grammarAccess.getDataTypeAccess().getDataTypeAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getFloatKeyword_0_1()); }
	'float'
	{ after(grammarAccess.getDataTypeAccess().getFloatKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group_1__0__Impl
	rule__DataType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getDataTypeAction_1_0()); }
	()
	{ after(grammarAccess.getDataTypeAccess().getDataTypeAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DataType__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDataTypeAccess().getIntKeyword_1_1()); }
	'int'
	{ after(grammarAccess.getDataTypeAccess().getIntKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Struct__Group__0__Impl
	rule__Struct__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructAccess().getStructAction_0()); }
	()
	{ after(grammarAccess.getStructAccess().getStructAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Struct__Group__1__Impl
	rule__Struct__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructAccess().getStructKeyword_1()); }
	'struct'
	{ after(grammarAccess.getStructAccess().getStructKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Struct__Group__2__Impl
	rule__Struct__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
	{ after(grammarAccess.getStructAccess().getIDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Struct__Group__3__Impl
	rule__Struct__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructAccess().getAsteriskKeyword_3()); }
	('*')?
	{ after(grammarAccess.getStructAccess().getAsteriskKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Struct__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructAccess().getIDTerminalRuleCall_4()); }
	RULE_ID
	{ after(grammarAccess.getStructAccess().getIDTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Goto__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Goto__Group__0__Impl
	rule__Goto__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoAccess().getGotoAction_0()); }
	()
	{ after(grammarAccess.getGotoAccess().getGotoAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Goto__Group__1__Impl
	rule__Goto__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoAccess().getGotoKeyword_1()); }
	'goto'
	{ after(grammarAccess.getGotoAccess().getGotoKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Goto__Group__2__Impl
	rule__Goto__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
	{ after(grammarAccess.getGotoAccess().getIDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Goto__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Goto__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGotoAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getGotoAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Label__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__0__Impl
	rule__Label__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelAccess().getLabelAction_0()); }
	()
	{ after(grammarAccess.getLabelAccess().getLabelAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__1__Impl
	rule__Label__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelAccess().getLessThanSignKeyword_1()); }
	'<'
	{ after(grammarAccess.getLabelAccess().getLessThanSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__2__Impl
	rule__Label__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
	{ after(grammarAccess.getLabelAccess().getIDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__3__Impl
	rule__Label__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
	{ after(grammarAccess.getLabelAccess().getINTTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__4__Impl
	rule__Label__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelAccess().getGreaterThanSignKeyword_4()); }
	'>'
	{ after(grammarAccess.getLabelAccess().getGreaterThanSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Label__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Label__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLabelAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getLabelAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getIfAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getBooleanExpressionParserRuleCall_2()); }
	ruleBooleanExpression
	{ after(grammarAccess.getIfAccess().getBooleanExpressionParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getIfAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignOperation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignOperation__Group__0__Impl
	rule__AssignOperation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignOperationAccess().getAssignOperationAction_0()); }
	()
	{ after(grammarAccess.getAssignOperationAccess().getAssignOperationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignOperation__Group__1__Impl
	rule__AssignOperation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignOperation__Group__2__Impl
	rule__AssignOperation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignOperationAccess().getGroup_2()); }
	(rule__AssignOperation__Group_2__0)?
	{ after(grammarAccess.getAssignOperationAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignOperation__Group__3__Impl
	rule__AssignOperation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignOperationAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getAssignOperationAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignOperation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignOperationAccess().getAlternatives_4()); }
	(rule__AssignOperation__Alternatives_4)
	{ after(grammarAccess.getAssignOperationAccess().getAlternatives_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignOperation__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignOperation__Group_2__0__Impl
	rule__AssignOperation__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignOperationAccess().getFullStopKeyword_2_0()); }
	'.'
	{ after(grammarAccess.getAssignOperationAccess().getFullStopKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignOperation__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_2_1()); }
	RULE_ID
	{ after(grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AssignOperation__Group_4_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignOperation__Group_4_3__0__Impl
	rule__AssignOperation__Group_4_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group_4_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignOperationAccess().getAmpersandKeyword_4_3_0()); }
	'&'
	{ after(grammarAccess.getAssignOperationAccess().getAmpersandKeyword_4_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group_4_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignOperation__Group_4_3__1__Impl
	rule__AssignOperation__Group_4_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group_4_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_4_3_1()); }
	RULE_ID
	{ after(grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_4_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group_4_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignOperation__Group_4_3__2__Impl
	rule__AssignOperation__Group_4_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group_4_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignOperationAccess().getHyphenMinusGreaterThanSignKeyword_4_3_2()); }
	'->'
	{ after(grammarAccess.getAssignOperationAccess().getHyphenMinusGreaterThanSignKeyword_4_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group_4_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AssignOperation__Group_4_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__Group_4_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_4_3_3()); }
	RULE_ID
	{ after(grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_4_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionAction_0()); }
	()
	{ after(grammarAccess.getFunctionAccess().getFunctionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
	(rule__Function__NameAssignment_1)
	{ after(grammarAccess.getFunctionAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_0__0__Impl
	rule__BooleanExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
	{ after(grammarAccess.getBooleanExpressionAccess().getIDTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_0__1__Impl
	rule__BooleanExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getLogicalOperationParserRuleCall_0_1()); }
	ruleLogicalOperation
	{ after(grammarAccess.getBooleanExpressionAccess().getLogicalOperationParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BooleanExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanExpressionAccess().getINTTerminalRuleCall_0_2()); }
	RULE_INT
	{ after(grammarAccess.getBooleanExpressionAccess().getINTTerminalRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TAC__TacAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTACAccess().getTacFunctionDefParserRuleCall_0()); }
		ruleFunctionDef
		{ after(grammarAccess.getTACAccess().getTacFunctionDefParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__FunctionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getFunctionFunctionParserRuleCall_1_0()); }
		ruleFunction
		{ after(grammarAccess.getFunctionDefAccess().getFunctionFunctionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__FunctionparamAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getFunctionparamFunctionParamParserRuleCall_3_0_0()); }
		ruleFunctionParam
		{ after(grammarAccess.getFunctionDefAccess().getFunctionparamFunctionParamParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__StructAssignment_6_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getStructStructParserRuleCall_6_0_0_0()); }
		ruleStruct
		{ after(grammarAccess.getFunctionDefAccess().getStructStructParserRuleCall_6_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__LabelAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getLabelLabelParserRuleCall_6_1_0()); }
		ruleLabel
		{ after(grammarAccess.getFunctionDefAccess().getLabelLabelParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__GotoAssignment_6_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getGotoGotoParserRuleCall_6_2_0()); }
		ruleGoto
		{ after(grammarAccess.getFunctionDefAccess().getGotoGotoParserRuleCall_6_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__IfAssignment_6_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getIfIfParserRuleCall_6_3_0()); }
		ruleIf
		{ after(grammarAccess.getFunctionDefAccess().getIfIfParserRuleCall_6_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__FunctionCallAssignment_6_5_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getFunctionCallFunctionCallParserRuleCall_6_5_0_0()); }
		ruleFunctionCall
		{ after(grammarAccess.getFunctionDefAccess().getFunctionCallFunctionCallParserRuleCall_6_5_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDef__AssignOpAssignment_6_6_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionDefAccess().getAssignOpAssignOperationParserRuleCall_6_6_0_0()); }
		ruleAssignOperation
		{ after(grammarAccess.getFunctionDefAccess().getAssignOpAssignOperationParserRuleCall_6_6_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FunctionCallAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getFunctionCallFunctionCrossReference_1_0()); }
		(
			{ before(grammarAccess.getFunctionCallAccess().getFunctionCallFunctionIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionCallAccess().getFunctionCallFunctionIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getFunctionCallAccess().getFunctionCallFunctionCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FunctionArgumentAssignment_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getFunctionArgumentFunctionArgumentParserRuleCall_3_0_0()); }
		ruleFunctionArgument
		{ after(grammarAccess.getFunctionCallAccess().getFunctionArgumentFunctionArgumentParserRuleCall_3_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__StructAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionParamAccess().getStructStructParserRuleCall_0_1_0()); }
		ruleStruct
		{ after(grammarAccess.getFunctionParamAccess().getStructStructParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__DatatypeAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionParamAccess().getDatatypeDataTypeParserRuleCall_1_0_0()); }
		ruleDataType
		{ after(grammarAccess.getFunctionParamAccess().getDatatypeDataTypeParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionParam__NameAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionParamAccess().getNameIDTerminalRuleCall_1_2_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionParamAccess().getNameIDTerminalRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AssignOperation__FunctionCallAssignment_4_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignOperationAccess().getFunctionCallFunctionCallParserRuleCall_4_5_0()); }
		ruleFunctionCall
		{ after(grammarAccess.getAssignOperationAccess().getFunctionCallFunctionCallParserRuleCall_4_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
