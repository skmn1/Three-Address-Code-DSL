/*
 * generated by Xtext 2.25.0
 */
package fr.ensma.dsl.serializer;

import com.google.inject.Inject;
import fr.ensma.dsl.services.ThreeAddressCodeGrammarAccess;
import fr.ensma.dsl.threeAddressCode.AssignOperation;
import fr.ensma.dsl.threeAddressCode.DataType;
import fr.ensma.dsl.threeAddressCode.Function;
import fr.ensma.dsl.threeAddressCode.FunctionArgument;
import fr.ensma.dsl.threeAddressCode.FunctionCall;
import fr.ensma.dsl.threeAddressCode.FunctionDef;
import fr.ensma.dsl.threeAddressCode.FunctionParam;
import fr.ensma.dsl.threeAddressCode.Goto;
import fr.ensma.dsl.threeAddressCode.Label;
import fr.ensma.dsl.threeAddressCode.Struct;
import fr.ensma.dsl.threeAddressCode.TAC;
import fr.ensma.dsl.threeAddressCode.ThreeAddressCodePackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ThreeAddressCodeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ThreeAddressCodeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ThreeAddressCodePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ThreeAddressCodePackage.ASSIGN_OPERATION:
				sequence_AssignOperation(context, (AssignOperation) semanticObject); 
				return; 
			case ThreeAddressCodePackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case ThreeAddressCodePackage.FUNCTION:
				sequence_Function(context, (Function) semanticObject); 
				return; 
			case ThreeAddressCodePackage.FUNCTION_ARGUMENT:
				sequence_FunctionArgument(context, (FunctionArgument) semanticObject); 
				return; 
			case ThreeAddressCodePackage.FUNCTION_CALL:
				sequence_FunctionCall(context, (FunctionCall) semanticObject); 
				return; 
			case ThreeAddressCodePackage.FUNCTION_DEF:
				sequence_FunctionDef(context, (FunctionDef) semanticObject); 
				return; 
			case ThreeAddressCodePackage.FUNCTION_PARAM:
				sequence_FunctionParam(context, (FunctionParam) semanticObject); 
				return; 
			case ThreeAddressCodePackage.GOTO:
				sequence_Goto(context, (Goto) semanticObject); 
				return; 
			case ThreeAddressCodePackage.LABEL:
				sequence_Label(context, (Label) semanticObject); 
				return; 
			case ThreeAddressCodePackage.STRUCT:
				sequence_Struct(context, (Struct) semanticObject); 
				return; 
			case ThreeAddressCodePackage.TAC:
				sequence_TAC(context, (TAC) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AssignOperation returns AssignOperation
	 *
	 * Constraint:
	 *     functionCall+=FunctionCall?
	 */
	protected void sequence_AssignOperation(ISerializationContext context, AssignOperation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     {DataType}
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionArgument returns FunctionArgument
	 *
	 * Constraint:
	 *     {FunctionArgument}
	 */
	protected void sequence_FunctionArgument(ISerializationContext context, FunctionArgument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionCall returns FunctionCall
	 *
	 * Constraint:
	 *     (functionCall+=[Function|ID] functionArgument+=FunctionArgument*)
	 */
	protected void sequence_FunctionCall(ISerializationContext context, FunctionCall semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionDef returns FunctionDef
	 *
	 * Constraint:
	 *     (
	 *         function+=Function 
	 *         functionparam+=FunctionParam* 
	 *         (
	 *             struct+=Struct | 
	 *             label+=Label | 
	 *             goto+=Goto | 
	 *             if+=If | 
	 *             functionCall+=FunctionCall | 
	 *             assignOp+=AssignOperation
	 *         )*
	 *     )
	 */
	protected void sequence_FunctionDef(ISerializationContext context, FunctionDef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FunctionParam returns FunctionParam
	 *
	 * Constraint:
	 *     (struct+=Struct | (datatype=DataType name=ID))
	 */
	protected void sequence_FunctionParam(ISerializationContext context, FunctionParam semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Function returns Function
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Function(ISerializationContext context, Function semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ThreeAddressCodePackage.Literals.FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ThreeAddressCodePackage.Literals.FUNCTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Goto returns Goto
	 *
	 * Constraint:
	 *     {Goto}
	 */
	protected void sequence_Goto(ISerializationContext context, Goto semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Label returns Label
	 *
	 * Constraint:
	 *     {Label}
	 */
	protected void sequence_Label(ISerializationContext context, Label semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Struct returns Struct
	 *
	 * Constraint:
	 *     {Struct}
	 */
	protected void sequence_Struct(ISerializationContext context, Struct semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TAC returns TAC
	 *
	 * Constraint:
	 *     tac+=FunctionDef+
	 */
	protected void sequence_TAC(ISerializationContext context, TAC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
