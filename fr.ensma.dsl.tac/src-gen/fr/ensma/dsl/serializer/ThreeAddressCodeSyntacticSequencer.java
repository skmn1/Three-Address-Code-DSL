/*
 * generated by Xtext 2.25.0
 */
package fr.ensma.dsl.serializer;

import com.google.inject.Inject;
import fr.ensma.dsl.services.ThreeAddressCodeGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class ThreeAddressCodeSyntacticSequencer extends AbstractSyntacticSequencer {

	protected ThreeAddressCodeGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ArithmeticOperation_AsteriskKeyword_2_or_HyphenMinusKeyword_1_or_PlusSignKeyword_0_or_SolidusKeyword_3;
	protected AbstractElementAlias match_AssignOperation_CLOBBERKeyword_4_4_or_IDTerminalRuleCall_4_0_or_INTTerminalRuleCall_4_2_or_STRINGTerminalRuleCall_4_1_or___AmpersandKeyword_4_3_0_IDTerminalRuleCall_4_3_1_HyphenMinusGreaterThanSignKeyword_4_3_2_IDTerminalRuleCall_4_3_3__;
	protected AbstractElementAlias match_AssignOperation___FullStopKeyword_2_0_IDTerminalRuleCall_2_1__q;
	protected AbstractElementAlias match_BooleanExpression_LogicalOperation_IDTerminalRuleCall_1_or___IDTerminalRuleCall_0_0___AndKeyword_0_or_EqualsSignEqualsSignKeyword_6_or_EqualsSignGreaterThanSignKeyword_5_or_EqualsSignLessThanSignKeyword_2_or_ExclamationMarkEqualsSignKeyword_7_or_GreaterThanSignKeyword_4_or_LessThanSignKeyword_3_or_OrKeyword_1___INTTerminalRuleCall_0_2__;
	protected AbstractElementAlias match_DataType_FloatKeyword_0_1_or_IntKeyword_1_1;
	protected AbstractElementAlias match_DataType_Int16_tKeyword_3_or_Uint8_tKeyword_2;
	protected AbstractElementAlias match_FunctionArgument_AmpersandKeyword_0_1_0_q;
	protected AbstractElementAlias match_FunctionCall_CommaKeyword_3_1_q;
	protected AbstractElementAlias match_FunctionDef_CommaKeyword_3_1_q;
	protected AbstractElementAlias match_FunctionDef_ReturnKeyword_7_q;
	protected AbstractElementAlias match_FunctionDef___NumberSignKeyword_6_4_0_DEBUGKeyword_6_4_1_BEGIN_STMTKeyword_6_4_2__a;
	protected AbstractElementAlias match_FunctionParam_AsteriskKeyword_1_1_q;
	protected AbstractElementAlias match_LogicalOperation_AndKeyword_0_or_EqualsSignEqualsSignKeyword_6_or_EqualsSignGreaterThanSignKeyword_5_or_EqualsSignLessThanSignKeyword_2_or_ExclamationMarkEqualsSignKeyword_7_or_GreaterThanSignKeyword_4_or_LessThanSignKeyword_3_or_OrKeyword_1;
	protected AbstractElementAlias match_Struct_AsteriskKeyword_3_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (ThreeAddressCodeGrammarAccess) access;
		match_ArithmeticOperation_AsteriskKeyword_2_or_HyphenMinusKeyword_1_or_PlusSignKeyword_0_or_SolidusKeyword_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getArithmeticOperationAccess().getAsteriskKeyword_2()), new TokenAlias(false, false, grammarAccess.getArithmeticOperationAccess().getHyphenMinusKeyword_1()), new TokenAlias(false, false, grammarAccess.getArithmeticOperationAccess().getPlusSignKeyword_0()), new TokenAlias(false, false, grammarAccess.getArithmeticOperationAccess().getSolidusKeyword_3()));
		match_AssignOperation_CLOBBERKeyword_4_4_or_IDTerminalRuleCall_4_0_or_INTTerminalRuleCall_4_2_or_STRINGTerminalRuleCall_4_1_or___AmpersandKeyword_4_3_0_IDTerminalRuleCall_4_3_1_HyphenMinusGreaterThanSignKeyword_4_3_2_IDTerminalRuleCall_4_3_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getAmpersandKeyword_4_3_0()), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_4_3_1()), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getHyphenMinusGreaterThanSignKeyword_4_3_2()), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_4_3_3())), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getCLOBBERKeyword_4_4()), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_4_0()), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getINTTerminalRuleCall_4_2()), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getSTRINGTerminalRuleCall_4_1()));
		match_AssignOperation___FullStopKeyword_2_0_IDTerminalRuleCall_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getFullStopKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getAssignOperationAccess().getIDTerminalRuleCall_2_1()));
		match_BooleanExpression_LogicalOperation_IDTerminalRuleCall_1_or___IDTerminalRuleCall_0_0___AndKeyword_0_or_EqualsSignEqualsSignKeyword_6_or_EqualsSignGreaterThanSignKeyword_5_or_EqualsSignLessThanSignKeyword_2_or_ExclamationMarkEqualsSignKeyword_7_or_GreaterThanSignKeyword_4_or_LessThanSignKeyword_3_or_OrKeyword_1___INTTerminalRuleCall_0_2__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getBooleanExpressionAccess().getIDTerminalRuleCall_0_0()), new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getAndKeyword_0()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getEqualsSignEqualsSignKeyword_6()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getEqualsSignGreaterThanSignKeyword_5()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getEqualsSignLessThanSignKeyword_2()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getExclamationMarkEqualsSignKeyword_7()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getGreaterThanSignKeyword_4()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getLessThanSignKeyword_3()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getOrKeyword_1())), new TokenAlias(false, false, grammarAccess.getBooleanExpressionAccess().getINTTerminalRuleCall_0_2())), new TokenAlias(false, false, grammarAccess.getBooleanExpressionAccess().getIDTerminalRuleCall_1()));
		match_DataType_FloatKeyword_0_1_or_IntKeyword_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDataTypeAccess().getFloatKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getDataTypeAccess().getIntKeyword_1_1()));
		match_DataType_Int16_tKeyword_3_or_Uint8_tKeyword_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDataTypeAccess().getInt16_tKeyword_3()), new TokenAlias(false, false, grammarAccess.getDataTypeAccess().getUint8_tKeyword_2()));
		match_FunctionArgument_AmpersandKeyword_0_1_0_q = new TokenAlias(false, true, grammarAccess.getFunctionArgumentAccess().getAmpersandKeyword_0_1_0());
		match_FunctionCall_CommaKeyword_3_1_q = new TokenAlias(false, true, grammarAccess.getFunctionCallAccess().getCommaKeyword_3_1());
		match_FunctionDef_CommaKeyword_3_1_q = new TokenAlias(false, true, grammarAccess.getFunctionDefAccess().getCommaKeyword_3_1());
		match_FunctionDef_ReturnKeyword_7_q = new TokenAlias(false, true, grammarAccess.getFunctionDefAccess().getReturnKeyword_7());
		match_FunctionDef___NumberSignKeyword_6_4_0_DEBUGKeyword_6_4_1_BEGIN_STMTKeyword_6_4_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getFunctionDefAccess().getNumberSignKeyword_6_4_0()), new TokenAlias(false, false, grammarAccess.getFunctionDefAccess().getDEBUGKeyword_6_4_1()), new TokenAlias(false, false, grammarAccess.getFunctionDefAccess().getBEGIN_STMTKeyword_6_4_2()));
		match_FunctionParam_AsteriskKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getFunctionParamAccess().getAsteriskKeyword_1_1());
		match_LogicalOperation_AndKeyword_0_or_EqualsSignEqualsSignKeyword_6_or_EqualsSignGreaterThanSignKeyword_5_or_EqualsSignLessThanSignKeyword_2_or_ExclamationMarkEqualsSignKeyword_7_or_GreaterThanSignKeyword_4_or_LessThanSignKeyword_3_or_OrKeyword_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getAndKeyword_0()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getEqualsSignEqualsSignKeyword_6()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getEqualsSignGreaterThanSignKeyword_5()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getEqualsSignLessThanSignKeyword_2()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getExclamationMarkEqualsSignKeyword_7()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getGreaterThanSignKeyword_4()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getLessThanSignKeyword_3()), new TokenAlias(false, false, grammarAccess.getLogicalOperationAccess().getOrKeyword_1()));
		match_Struct_AsteriskKeyword_3_q = new TokenAlias(false, true, grammarAccess.getStructAccess().getAsteriskKeyword_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getINTRule())
			return getINTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSTRINGRule())
			return getSTRINGToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal INT returns ecore::EInt: ('0'..'9')+;
	 */
	protected String getINTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal STRING:
	 * 			'"' ( '\\' .  | !('\\'|'"') )* '"' |
	 * 			"'" ( '\\' .  | !('\\'|"'") )* "'"
	 * 		;
	 */
	protected String getSTRINGToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\"\"";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ArithmeticOperation_AsteriskKeyword_2_or_HyphenMinusKeyword_1_or_PlusSignKeyword_0_or_SolidusKeyword_3.equals(syntax))
				emit_ArithmeticOperation_AsteriskKeyword_2_or_HyphenMinusKeyword_1_or_PlusSignKeyword_0_or_SolidusKeyword_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AssignOperation_CLOBBERKeyword_4_4_or_IDTerminalRuleCall_4_0_or_INTTerminalRuleCall_4_2_or_STRINGTerminalRuleCall_4_1_or___AmpersandKeyword_4_3_0_IDTerminalRuleCall_4_3_1_HyphenMinusGreaterThanSignKeyword_4_3_2_IDTerminalRuleCall_4_3_3__.equals(syntax))
				emit_AssignOperation_CLOBBERKeyword_4_4_or_IDTerminalRuleCall_4_0_or_INTTerminalRuleCall_4_2_or_STRINGTerminalRuleCall_4_1_or___AmpersandKeyword_4_3_0_IDTerminalRuleCall_4_3_1_HyphenMinusGreaterThanSignKeyword_4_3_2_IDTerminalRuleCall_4_3_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_AssignOperation___FullStopKeyword_2_0_IDTerminalRuleCall_2_1__q.equals(syntax))
				emit_AssignOperation___FullStopKeyword_2_0_IDTerminalRuleCall_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_BooleanExpression_LogicalOperation_IDTerminalRuleCall_1_or___IDTerminalRuleCall_0_0___AndKeyword_0_or_EqualsSignEqualsSignKeyword_6_or_EqualsSignGreaterThanSignKeyword_5_or_EqualsSignLessThanSignKeyword_2_or_ExclamationMarkEqualsSignKeyword_7_or_GreaterThanSignKeyword_4_or_LessThanSignKeyword_3_or_OrKeyword_1___INTTerminalRuleCall_0_2__.equals(syntax))
				emit_BooleanExpression_LogicalOperation_IDTerminalRuleCall_1_or___IDTerminalRuleCall_0_0___AndKeyword_0_or_EqualsSignEqualsSignKeyword_6_or_EqualsSignGreaterThanSignKeyword_5_or_EqualsSignLessThanSignKeyword_2_or_ExclamationMarkEqualsSignKeyword_7_or_GreaterThanSignKeyword_4_or_LessThanSignKeyword_3_or_OrKeyword_1___INTTerminalRuleCall_0_2__(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DataType_FloatKeyword_0_1_or_IntKeyword_1_1.equals(syntax))
				emit_DataType_FloatKeyword_0_1_or_IntKeyword_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DataType_Int16_tKeyword_3_or_Uint8_tKeyword_2.equals(syntax))
				emit_DataType_Int16_tKeyword_3_or_Uint8_tKeyword_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionArgument_AmpersandKeyword_0_1_0_q.equals(syntax))
				emit_FunctionArgument_AmpersandKeyword_0_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionCall_CommaKeyword_3_1_q.equals(syntax))
				emit_FunctionCall_CommaKeyword_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionDef_CommaKeyword_3_1_q.equals(syntax))
				emit_FunctionDef_CommaKeyword_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionDef_ReturnKeyword_7_q.equals(syntax))
				emit_FunctionDef_ReturnKeyword_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionDef___NumberSignKeyword_6_4_0_DEBUGKeyword_6_4_1_BEGIN_STMTKeyword_6_4_2__a.equals(syntax))
				emit_FunctionDef___NumberSignKeyword_6_4_0_DEBUGKeyword_6_4_1_BEGIN_STMTKeyword_6_4_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionParam_AsteriskKeyword_1_1_q.equals(syntax))
				emit_FunctionParam_AsteriskKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_LogicalOperation_AndKeyword_0_or_EqualsSignEqualsSignKeyword_6_or_EqualsSignGreaterThanSignKeyword_5_or_EqualsSignLessThanSignKeyword_2_or_ExclamationMarkEqualsSignKeyword_7_or_GreaterThanSignKeyword_4_or_LessThanSignKeyword_3_or_OrKeyword_1.equals(syntax))
				emit_LogicalOperation_AndKeyword_0_or_EqualsSignEqualsSignKeyword_6_or_EqualsSignGreaterThanSignKeyword_5_or_EqualsSignLessThanSignKeyword_2_or_ExclamationMarkEqualsSignKeyword_7_or_GreaterThanSignKeyword_4_or_LessThanSignKeyword_3_or_OrKeyword_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Struct_AsteriskKeyword_3_q.equals(syntax))
				emit_Struct_AsteriskKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '+' | '-' | '*' | '/'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_ArithmeticOperation_AsteriskKeyword_2_or_HyphenMinusKeyword_1_or_PlusSignKeyword_0_or_SolidusKeyword_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ID | STRING | INT | ('&' ID '->' ID) | '{CLOBBER}'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ID ('.' ID)? '=' (ambiguity) (rule start)
	 */
	protected void emit_AssignOperation_CLOBBERKeyword_4_4_or_IDTerminalRuleCall_4_0_or_INTTerminalRuleCall_4_2_or_STRINGTerminalRuleCall_4_1_or___AmpersandKeyword_4_3_0_IDTerminalRuleCall_4_3_1_HyphenMinusGreaterThanSignKeyword_4_3_2_IDTerminalRuleCall_4_3_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('.' ID)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ID (ambiguity) '=' (ID | STRING | INT | ('&' ID '->' ID) | '{CLOBBER}') (rule start)
	 *     (rule start) ID (ambiguity) '=' functionCall+=FunctionCall
	 */
	protected void emit_AssignOperation___FullStopKeyword_2_0_IDTerminalRuleCall_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         (
	  *             ID 
	  *             (
	  *                 'and' | 
	  *                 'or' | 
	  *                 '=<' | 
	  *                 '<' | 
	  *                 '>' | 
	  *                 '=>' | 
	  *                 '==' | 
	  *                 '!='
	  *             ) 
	  *             INT
	  *         ) | 
	  *         ID
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' '(' (ambiguity) ')' (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_BooleanExpression_LogicalOperation_IDTerminalRuleCall_1_or___IDTerminalRuleCall_0_0___AndKeyword_0_or_EqualsSignEqualsSignKeyword_6_or_EqualsSignGreaterThanSignKeyword_5_or_EqualsSignLessThanSignKeyword_2_or_ExclamationMarkEqualsSignKeyword_7_or_GreaterThanSignKeyword_4_or_LessThanSignKeyword_3_or_OrKeyword_1___INTTerminalRuleCall_0_2__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'float' | 'int'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_DataType_FloatKeyword_0_1_or_IntKeyword_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'uint8_t' | 'int16_t'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_DataType_Int16_tKeyword_3_or_Uint8_tKeyword_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '&'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ID (rule start)
	 */
	protected void emit_FunctionArgument_AmpersandKeyword_0_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     functionArgument+=FunctionArgument (ambiguity) ')' (rule end)
	 *     functionArgument+=FunctionArgument (ambiguity) functionArgument+=FunctionArgument
	 */
	protected void emit_FunctionCall_CommaKeyword_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     functionparam+=FunctionParam (ambiguity) ')' '{' ('#' 'DEBUG' 'BEGIN_STMT')* 'return;'? '}' (rule end)
	 *     functionparam+=FunctionParam (ambiguity) ')' '{' ('#' 'DEBUG' 'BEGIN_STMT')* assignOp+=AssignOperation
	 *     functionparam+=FunctionParam (ambiguity) ')' '{' ('#' 'DEBUG' 'BEGIN_STMT')* functionCall+=FunctionCall
	 *     functionparam+=FunctionParam (ambiguity) ')' '{' ('#' 'DEBUG' 'BEGIN_STMT')* goto+=Goto
	 *     functionparam+=FunctionParam (ambiguity) ')' '{' ('#' 'DEBUG' 'BEGIN_STMT')* if+=If
	 *     functionparam+=FunctionParam (ambiguity) ')' '{' ('#' 'DEBUG' 'BEGIN_STMT')* label+=Label
	 *     functionparam+=FunctionParam (ambiguity) ')' '{' ('#' 'DEBUG' 'BEGIN_STMT')* struct+=Struct
	 *     functionparam+=FunctionParam (ambiguity) functionparam+=FunctionParam
	 */
	protected void emit_FunctionDef_CommaKeyword_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'return;'?
	 *
	 * This ambiguous syntax occurs at:
	 *     assignOp+=AssignOperation ';' ('#' 'DEBUG' 'BEGIN_STMT')* (ambiguity) '}' (rule end)
	 *     function+=Function '(' ')' '{' ('#' 'DEBUG' 'BEGIN_STMT')* (ambiguity) '}' (rule end)
	 *     functionCall+=FunctionCall ';' ('#' 'DEBUG' 'BEGIN_STMT')* (ambiguity) '}' (rule end)
	 *     functionparam+=FunctionParam ','? ')' '{' ('#' 'DEBUG' 'BEGIN_STMT')* (ambiguity) '}' (rule end)
	 *     goto+=Goto ('#' 'DEBUG' 'BEGIN_STMT')* (ambiguity) '}' (rule end)
	 *     if+=If ('#' 'DEBUG' 'BEGIN_STMT')* (ambiguity) '}' (rule end)
	 *     label+=Label ('#' 'DEBUG' 'BEGIN_STMT')* (ambiguity) '}' (rule end)
	 *     struct+=Struct ';' ('#' 'DEBUG' 'BEGIN_STMT')* (ambiguity) '}' (rule end)
	 */
	protected void emit_FunctionDef_ReturnKeyword_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('#' 'DEBUG' 'BEGIN_STMT')*
	 *
	 * This ambiguous syntax occurs at:
	 *     assignOp+=AssignOperation ';' (ambiguity) 'return;'? '}' (rule end)
	 *     assignOp+=AssignOperation ';' (ambiguity) assignOp+=AssignOperation
	 *     assignOp+=AssignOperation ';' (ambiguity) functionCall+=FunctionCall
	 *     assignOp+=AssignOperation ';' (ambiguity) goto+=Goto
	 *     assignOp+=AssignOperation ';' (ambiguity) if+=If
	 *     assignOp+=AssignOperation ';' (ambiguity) label+=Label
	 *     assignOp+=AssignOperation ';' (ambiguity) struct+=Struct
	 *     function+=Function '(' ')' '{' (ambiguity) 'return;'? '}' (rule end)
	 *     function+=Function '(' ')' '{' (ambiguity) assignOp+=AssignOperation
	 *     function+=Function '(' ')' '{' (ambiguity) functionCall+=FunctionCall
	 *     function+=Function '(' ')' '{' (ambiguity) goto+=Goto
	 *     function+=Function '(' ')' '{' (ambiguity) if+=If
	 *     function+=Function '(' ')' '{' (ambiguity) label+=Label
	 *     function+=Function '(' ')' '{' (ambiguity) struct+=Struct
	 *     functionCall+=FunctionCall ';' (ambiguity) 'return;'? '}' (rule end)
	 *     functionCall+=FunctionCall ';' (ambiguity) assignOp+=AssignOperation
	 *     functionCall+=FunctionCall ';' (ambiguity) functionCall+=FunctionCall
	 *     functionCall+=FunctionCall ';' (ambiguity) goto+=Goto
	 *     functionCall+=FunctionCall ';' (ambiguity) if+=If
	 *     functionCall+=FunctionCall ';' (ambiguity) label+=Label
	 *     functionCall+=FunctionCall ';' (ambiguity) struct+=Struct
	 *     functionparam+=FunctionParam ','? ')' '{' (ambiguity) 'return;'? '}' (rule end)
	 *     functionparam+=FunctionParam ','? ')' '{' (ambiguity) assignOp+=AssignOperation
	 *     functionparam+=FunctionParam ','? ')' '{' (ambiguity) functionCall+=FunctionCall
	 *     functionparam+=FunctionParam ','? ')' '{' (ambiguity) goto+=Goto
	 *     functionparam+=FunctionParam ','? ')' '{' (ambiguity) if+=If
	 *     functionparam+=FunctionParam ','? ')' '{' (ambiguity) label+=Label
	 *     functionparam+=FunctionParam ','? ')' '{' (ambiguity) struct+=Struct
	 *     goto+=Goto (ambiguity) 'return;'? '}' (rule end)
	 *     goto+=Goto (ambiguity) assignOp+=AssignOperation
	 *     goto+=Goto (ambiguity) functionCall+=FunctionCall
	 *     goto+=Goto (ambiguity) goto+=Goto
	 *     goto+=Goto (ambiguity) if+=If
	 *     goto+=Goto (ambiguity) label+=Label
	 *     goto+=Goto (ambiguity) struct+=Struct
	 *     if+=If (ambiguity) 'return;'? '}' (rule end)
	 *     if+=If (ambiguity) assignOp+=AssignOperation
	 *     if+=If (ambiguity) functionCall+=FunctionCall
	 *     if+=If (ambiguity) goto+=Goto
	 *     if+=If (ambiguity) if+=If
	 *     if+=If (ambiguity) label+=Label
	 *     if+=If (ambiguity) struct+=Struct
	 *     label+=Label (ambiguity) 'return;'? '}' (rule end)
	 *     label+=Label (ambiguity) assignOp+=AssignOperation
	 *     label+=Label (ambiguity) functionCall+=FunctionCall
	 *     label+=Label (ambiguity) goto+=Goto
	 *     label+=Label (ambiguity) if+=If
	 *     label+=Label (ambiguity) label+=Label
	 *     label+=Label (ambiguity) struct+=Struct
	 *     struct+=Struct ';' (ambiguity) 'return;'? '}' (rule end)
	 *     struct+=Struct ';' (ambiguity) assignOp+=AssignOperation
	 *     struct+=Struct ';' (ambiguity) functionCall+=FunctionCall
	 *     struct+=Struct ';' (ambiguity) goto+=Goto
	 *     struct+=Struct ';' (ambiguity) if+=If
	 *     struct+=Struct ';' (ambiguity) label+=Label
	 *     struct+=Struct ';' (ambiguity) struct+=Struct
	 */
	protected void emit_FunctionDef___NumberSignKeyword_6_4_0_DEBUGKeyword_6_4_1_BEGIN_STMTKeyword_6_4_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*'?
	 *
	 * This ambiguous syntax occurs at:
	 *     datatype=DataType (ambiguity) name=ID
	 */
	protected void emit_FunctionParam_AsteriskKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         'and' | 
	  *         'or' | 
	  *         '=<' | 
	  *         '<' | 
	  *         '>' | 
	  *         '=>' | 
	  *         '==' | 
	  *         '!='
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_LogicalOperation_AndKeyword_0_or_EqualsSignEqualsSignKeyword_6_or_EqualsSignGreaterThanSignKeyword_5_or_EqualsSignLessThanSignKeyword_2_or_ExclamationMarkEqualsSignKeyword_7_or_GreaterThanSignKeyword_4_or_LessThanSignKeyword_3_or_OrKeyword_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '*'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'struct' ID (ambiguity) ID (rule start)
	 */
	protected void emit_Struct_AsteriskKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
