/*
 * generated by Xtext 2.25.0
 */
package fr.ensma.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ThreeAddressCodeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TACElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.TAC");
		private final Assignment cTacAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTacFunctionDefParserRuleCall_0 = (RuleCall)cTacAssignment.eContents().get(0);
		
		//TAC  returns TAC:
		//    tac += FunctionDef*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//tac += FunctionDef*
		public Assignment getTacAssignment() { return cTacAssignment; }
		
		//FunctionDef
		public RuleCall getTacFunctionDefParserRuleCall_0() { return cTacFunctionDefParserRuleCall_0; }
	}
	public class FunctionDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.FunctionDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunctionFunctionParserRuleCall_1_0 = (RuleCall)cFunctionAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFunctionparamAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFunctionparamFunctionParamParserRuleCall_3_0_0 = (RuleCall)cFunctionparamAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Group cGroup_6_0 = (Group)cAlternatives_6.eContents().get(0);
		private final Assignment cStructAssignment_6_0_0 = (Assignment)cGroup_6_0.eContents().get(0);
		private final RuleCall cStructStructParserRuleCall_6_0_0_0 = (RuleCall)cStructAssignment_6_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_0_1 = (Keyword)cGroup_6_0.eContents().get(1);
		private final Assignment cLabelAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cLabelLabelParserRuleCall_6_1_0 = (RuleCall)cLabelAssignment_6_1.eContents().get(0);
		private final Assignment cGotoAssignment_6_2 = (Assignment)cAlternatives_6.eContents().get(2);
		private final RuleCall cGotoGotoParserRuleCall_6_2_0 = (RuleCall)cGotoAssignment_6_2.eContents().get(0);
		private final Assignment cIfAssignment_6_3 = (Assignment)cAlternatives_6.eContents().get(3);
		private final RuleCall cIfIfParserRuleCall_6_3_0 = (RuleCall)cIfAssignment_6_3.eContents().get(0);
		private final Group cGroup_6_4 = (Group)cAlternatives_6.eContents().get(4);
		private final Keyword cNumberSignKeyword_6_4_0 = (Keyword)cGroup_6_4.eContents().get(0);
		private final Keyword cDEBUGKeyword_6_4_1 = (Keyword)cGroup_6_4.eContents().get(1);
		private final Keyword cBEGIN_STMTKeyword_6_4_2 = (Keyword)cGroup_6_4.eContents().get(2);
		private final Group cGroup_6_5 = (Group)cAlternatives_6.eContents().get(5);
		private final Assignment cFunctionCallAssignment_6_5_0 = (Assignment)cGroup_6_5.eContents().get(0);
		private final RuleCall cFunctionCallFunctionCallParserRuleCall_6_5_0_0 = (RuleCall)cFunctionCallAssignment_6_5_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_5_1 = (Keyword)cGroup_6_5.eContents().get(1);
		private final Group cGroup_6_6 = (Group)cAlternatives_6.eContents().get(6);
		private final Assignment cAssignOpAssignment_6_6_0 = (Assignment)cGroup_6_6.eContents().get(0);
		private final RuleCall cAssignOpAssignOperationParserRuleCall_6_6_0_0 = (RuleCall)cAssignOpAssignment_6_6_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_6_1 = (Keyword)cGroup_6_6.eContents().get(1);
		private final Keyword cReturnKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FunctionDef returns FunctionDef:
		//    {FunctionDef}
		//    function+=Function '(' (functionparam+=FunctionParam','?)* ')' '{'
		//        ((struct+=Struct ';') |
		//        label+=Label|
		//        goto+=Goto|
		//        if+=If|
		//        ('#' 'DEBUG' 'BEGIN_STMT')|
		//        (functionCall+=FunctionCall ';')|
		//        (assignOp+=AssignOperation ';') )*
		//        'return;'?
		//     '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionDef}
		//function+=Function '(' (functionparam+=FunctionParam','?)* ')' '{'
		//    ((struct+=Struct ';') |
		//    label+=Label|
		//    goto+=Goto|
		//    if+=If|
		//    ('#' 'DEBUG' 'BEGIN_STMT')|
		//    (functionCall+=FunctionCall ';')|
		//    (assignOp+=AssignOperation ';') )*
		//    'return;'?
		// '}'
		public Group getGroup() { return cGroup; }
		
		//{FunctionDef}
		public Action getFunctionDefAction_0() { return cFunctionDefAction_0; }
		
		//function+=Function
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }
		
		//Function
		public RuleCall getFunctionFunctionParserRuleCall_1_0() { return cFunctionFunctionParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(functionparam+=FunctionParam','?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//functionparam+=FunctionParam
		public Assignment getFunctionparamAssignment_3_0() { return cFunctionparamAssignment_3_0; }
		
		//FunctionParam
		public RuleCall getFunctionparamFunctionParamParserRuleCall_3_0_0() { return cFunctionparamFunctionParamParserRuleCall_3_0_0; }
		
		//','?
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//((struct+=Struct ';') |
		//label+=Label|
		//goto+=Goto|
		//if+=If|
		//('#' 'DEBUG' 'BEGIN_STMT')|
		//(functionCall+=FunctionCall ';')|
		//(assignOp+=AssignOperation ';') )*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//(struct+=Struct ';')
		public Group getGroup_6_0() { return cGroup_6_0; }
		
		//struct+=Struct
		public Assignment getStructAssignment_6_0_0() { return cStructAssignment_6_0_0; }
		
		//Struct
		public RuleCall getStructStructParserRuleCall_6_0_0_0() { return cStructStructParserRuleCall_6_0_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_0_1() { return cSemicolonKeyword_6_0_1; }
		
		//label+=Label
		public Assignment getLabelAssignment_6_1() { return cLabelAssignment_6_1; }
		
		//Label
		public RuleCall getLabelLabelParserRuleCall_6_1_0() { return cLabelLabelParserRuleCall_6_1_0; }
		
		//goto+=Goto
		public Assignment getGotoAssignment_6_2() { return cGotoAssignment_6_2; }
		
		//Goto
		public RuleCall getGotoGotoParserRuleCall_6_2_0() { return cGotoGotoParserRuleCall_6_2_0; }
		
		//if+=If
		public Assignment getIfAssignment_6_3() { return cIfAssignment_6_3; }
		
		//If
		public RuleCall getIfIfParserRuleCall_6_3_0() { return cIfIfParserRuleCall_6_3_0; }
		
		//('#' 'DEBUG' 'BEGIN_STMT')
		public Group getGroup_6_4() { return cGroup_6_4; }
		
		//'#'
		public Keyword getNumberSignKeyword_6_4_0() { return cNumberSignKeyword_6_4_0; }
		
		//'DEBUG'
		public Keyword getDEBUGKeyword_6_4_1() { return cDEBUGKeyword_6_4_1; }
		
		//'BEGIN_STMT'
		public Keyword getBEGIN_STMTKeyword_6_4_2() { return cBEGIN_STMTKeyword_6_4_2; }
		
		//(functionCall+=FunctionCall ';')
		public Group getGroup_6_5() { return cGroup_6_5; }
		
		//functionCall+=FunctionCall
		public Assignment getFunctionCallAssignment_6_5_0() { return cFunctionCallAssignment_6_5_0; }
		
		//FunctionCall
		public RuleCall getFunctionCallFunctionCallParserRuleCall_6_5_0_0() { return cFunctionCallFunctionCallParserRuleCall_6_5_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_5_1() { return cSemicolonKeyword_6_5_1; }
		
		//(assignOp+=AssignOperation ';')
		public Group getGroup_6_6() { return cGroup_6_6; }
		
		//assignOp+=AssignOperation
		public Assignment getAssignOpAssignment_6_6_0() { return cAssignOpAssignment_6_6_0; }
		
		//AssignOperation
		public RuleCall getAssignOpAssignOperationParserRuleCall_6_6_0_0() { return cAssignOpAssignOperationParserRuleCall_6_6_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_6_6_1() { return cSemicolonKeyword_6_6_1; }
		
		//'return;'?
		public Keyword getReturnKeyword_7() { return cReturnKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionCallAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionCallFunctionCrossReference_1_0 = (CrossReference)cFunctionCallAssignment_1.eContents().get(0);
		private final RuleCall cFunctionCallFunctionIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionCallFunctionCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cFunctionArgumentAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cFunctionArgumentFunctionArgumentParserRuleCall_3_0_0 = (RuleCall)cFunctionArgumentAssignment_3_0.eContents().get(0);
		private final Keyword cCommaKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FunctionCall returns FunctionCall:
		//    {FunctionCall}
		//    functionCall+=[Function] '(' ( functionArgument+=FunctionArgument','?)* ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionCall}
		//functionCall+=[Function] '(' ( functionArgument+=FunctionArgument','?)* ')'
		public Group getGroup() { return cGroup; }
		
		//{FunctionCall}
		public Action getFunctionCallAction_0() { return cFunctionCallAction_0; }
		
		//functionCall+=[Function]
		public Assignment getFunctionCallAssignment_1() { return cFunctionCallAssignment_1; }
		
		//[Function]
		public CrossReference getFunctionCallFunctionCrossReference_1_0() { return cFunctionCallFunctionCrossReference_1_0; }
		
		//ID
		public RuleCall getFunctionCallFunctionIDTerminalRuleCall_1_0_1() { return cFunctionCallFunctionIDTerminalRuleCall_1_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//( functionArgument+=FunctionArgument','?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//functionArgument+=FunctionArgument
		public Assignment getFunctionArgumentAssignment_3_0() { return cFunctionArgumentAssignment_3_0; }
		
		//FunctionArgument
		public RuleCall getFunctionArgumentFunctionArgumentParserRuleCall_3_0_0() { return cFunctionArgumentFunctionArgumentParserRuleCall_3_0_0; }
		
		//','?
		public Keyword getCommaKeyword_3_1() { return cCommaKeyword_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class FunctionParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.FunctionParam");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFunctionParamAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cStructAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStructStructParserRuleCall_0_1_0 = (RuleCall)cStructAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDatatypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDatatypeDataTypeParserRuleCall_1_0_0 = (RuleCall)cDatatypeAssignment_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNameAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_1_2_0 = (RuleCall)cNameAssignment_1_2.eContents().get(0);
		
		//FunctionParam returns FunctionParam:
		//    {FunctionParam}
		//    struct+=Struct | (datatype=DataType '*'? name=ID)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionParam}
		//struct+=Struct | (datatype=DataType '*'? name=ID)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FunctionParam}
		//struct+=Struct
		public Group getGroup_0() { return cGroup_0; }
		
		//{FunctionParam}
		public Action getFunctionParamAction_0_0() { return cFunctionParamAction_0_0; }
		
		//struct+=Struct
		public Assignment getStructAssignment_0_1() { return cStructAssignment_0_1; }
		
		//Struct
		public RuleCall getStructStructParserRuleCall_0_1_0() { return cStructStructParserRuleCall_0_1_0; }
		
		//(datatype=DataType '*'? name=ID)
		public Group getGroup_1() { return cGroup_1; }
		
		//datatype=DataType
		public Assignment getDatatypeAssignment_1_0() { return cDatatypeAssignment_1_0; }
		
		//DataType
		public RuleCall getDatatypeDataTypeParserRuleCall_1_0_0() { return cDatatypeDataTypeParserRuleCall_1_0_0; }
		
		//'*'?
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_2() { return cNameAssignment_1_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_2_0() { return cNameIDTerminalRuleCall_1_2_0; }
	}
	public class FunctionArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.FunctionArgument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFunctionArgumentAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cAmpersandKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionArgument returns FunctionArgument:
		//    {FunctionArgument}
		//    ('&'? ID) | INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{FunctionArgument}
		//('&'? ID) | INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{FunctionArgument}
		//('&'? ID)
		public Group getGroup_0() { return cGroup_0; }
		
		//{FunctionArgument}
		public Action getFunctionArgumentAction_0_0() { return cFunctionArgumentAction_0_0; }
		
		//('&'? ID)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'&'?
		public Keyword getAmpersandKeyword_0_1_0() { return cAmpersandKeyword_0_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1_1() { return cIDTerminalRuleCall_0_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDataTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cFloatKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cDataTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cIntKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cUint8_tKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cInt16_tKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//DataType returns DataType:
		//    {DataType}
		//    'float'|{DataType} 'int' | 'uint8_t'|'int16_t'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{DataType}
		//'float'|{DataType} 'int' | 'uint8_t'|'int16_t'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{DataType}
		//'float'
		public Group getGroup_0() { return cGroup_0; }
		
		//{DataType}
		public Action getDataTypeAction_0_0() { return cDataTypeAction_0_0; }
		
		//'float'
		public Keyword getFloatKeyword_0_1() { return cFloatKeyword_0_1; }
		
		//{DataType} 'int'
		public Group getGroup_1() { return cGroup_1; }
		
		//{DataType}
		public Action getDataTypeAction_1_0() { return cDataTypeAction_1_0; }
		
		//'int'
		public Keyword getIntKeyword_1_1() { return cIntKeyword_1_1; }
		
		//'uint8_t'
		public Keyword getUint8_tKeyword_2() { return cUint8_tKeyword_2; }
		
		//'int16_t'
		public Keyword getInt16_tKeyword_3() { return cInt16_tKeyword_3; }
	}
	public class StructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.Struct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cAsteriskKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Struct returns Struct:
		//    {Struct}
		//    'struct' ID '*'? ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Struct}
		//'struct' ID '*'? ID
		public Group getGroup() { return cGroup; }
		
		//{Struct}
		public Action getStructAction_0() { return cStructAction_0; }
		
		//'struct'
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//'*'?
		public Keyword getAsteriskKeyword_3() { return cAsteriskKeyword_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }
	}
	public class GotoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.Goto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGotoAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGotoKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Goto returns Goto:
		//    {Goto}
		//    'goto' ID ';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Goto}
		//'goto' ID ';'
		public Group getGroup() { return cGroup; }
		
		//{Goto}
		public Action getGotoAction_0() { return cGotoAction_0; }
		
		//'goto'
		public Keyword getGotoKeyword_1() { return cGotoKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLabelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Label returns Label:
		//    {Label}
		//    '<'ID INT'>'':'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Label}
		//'<'ID INT'>'':'
		public Group getGroup() { return cGroup; }
		
		//{Label}
		public Action getLabelAction_0() { return cLabelAction_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//':'
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//If returns If:
		//    'if' '(' BooleanExpression ')'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'if' '(' BooleanExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_2() { return cBooleanExpressionParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AssignOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.AssignOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignOperationAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final RuleCall cIDTerminalRuleCall_4_0 = (RuleCall)cAlternatives_4.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_4_1 = (RuleCall)cAlternatives_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cAlternatives_4.eContents().get(2);
		private final Group cGroup_4_3 = (Group)cAlternatives_4.eContents().get(3);
		private final Keyword cAmpersandKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_3_1 = (RuleCall)cGroup_4_3.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4_3_2 = (Keyword)cGroup_4_3.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_4_3_3 = (RuleCall)cGroup_4_3.eContents().get(3);
		private final Keyword cCLOBBERKeyword_4_4 = (Keyword)cAlternatives_4.eContents().get(4);
		private final Assignment cFunctionCallAssignment_4_5 = (Assignment)cAlternatives_4.eContents().get(5);
		private final RuleCall cFunctionCallFunctionCallParserRuleCall_4_5_0 = (RuleCall)cFunctionCallAssignment_4_5.eContents().get(0);
		
		//AssignOperation returns AssignOperation:
		//    {AssignOperation}
		//    ID  ('.' ID) ? '=' (ID|STRING|INT|('&'ID '->' ID) |'{CLOBBER}'|functionCall+=FunctionCall)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{AssignOperation}
		//ID  ('.' ID) ? '=' (ID|STRING|INT|('&'ID '->' ID) |'{CLOBBER}'|functionCall+=FunctionCall)
		public Group getGroup() { return cGroup; }
		
		//{AssignOperation}
		public Action getAssignOperationAction_0() { return cAssignOperationAction_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//('.' ID) ?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//(ID|STRING|INT|('&'ID '->' ID) |'{CLOBBER}'|functionCall+=FunctionCall)
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4_0() { return cIDTerminalRuleCall_4_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4_1() { return cSTRINGTerminalRuleCall_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
		
		//('&'ID '->' ID)
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//'&'
		public Keyword getAmpersandKeyword_4_3_0() { return cAmpersandKeyword_4_3_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4_3_1() { return cIDTerminalRuleCall_4_3_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4_3_2() { return cHyphenMinusGreaterThanSignKeyword_4_3_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4_3_3() { return cIDTerminalRuleCall_4_3_3; }
		
		//'{CLOBBER}'
		public Keyword getCLOBBERKeyword_4_4() { return cCLOBBERKeyword_4_4; }
		
		//functionCall+=FunctionCall
		public Assignment getFunctionCallAssignment_4_5() { return cFunctionCallAssignment_4_5; }
		
		//FunctionCall
		public RuleCall getFunctionCallFunctionCallParserRuleCall_4_5_0() { return cFunctionCallFunctionCallParserRuleCall_4_5_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Function returns Function:
		//    {Function}
		//    name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//{Function}
		//name=ID
		public Group getGroup() { return cGroup; }
		
		//{Function}
		public Action getFunctionAction_0() { return cFunctionAction_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cLogicalOperationParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BooleanExpression returns BouleanExrpession:
		//    ID LogicalOperation INT| ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID LogicalOperation INT| ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ID LogicalOperation INT
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//LogicalOperation
		public RuleCall getLogicalOperationParserRuleCall_0_1() { return cLogicalOperationParserRuleCall_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ArithmeticOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.ArithmeticOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//ArithmeticOperation returns ArithmeticOperation:
		//    '+' | '-' | '*' | '/' ;
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '*' | '/'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
		
		//'/'
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }
	}
	public class LogicalOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.ensma.dsl.ThreeAddressCode.LogicalOperation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cEqualsSignLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cEqualsSignEqualsSignKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cExclamationMarkEqualsSignKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//LogicalOperation returns LogicalOperation:
		//    'and' | 'or' | '=<' | '<' | '>' | '=>' | '==' | '!=';
		@Override public ParserRule getRule() { return rule; }
		
		//'and' | 'or' | '=<' | '<' | '>' | '=>' | '==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'and'
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//'=<'
		public Keyword getEqualsSignLessThanSignKeyword_2() { return cEqualsSignLessThanSignKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//'=>'
		public Keyword getEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignGreaterThanSignKeyword_5; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_6() { return cEqualsSignEqualsSignKeyword_6; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_7() { return cExclamationMarkEqualsSignKeyword_7; }
	}
	
	
	private final TACElements pTAC;
	private final FunctionDefElements pFunctionDef;
	private final FunctionCallElements pFunctionCall;
	private final FunctionParamElements pFunctionParam;
	private final FunctionArgumentElements pFunctionArgument;
	private final DataTypeElements pDataType;
	private final StructElements pStruct;
	private final GotoElements pGoto;
	private final LabelElements pLabel;
	private final IfElements pIf;
	private final AssignOperationElements pAssignOperation;
	private final FunctionElements pFunction;
	private final BooleanExpressionElements pBooleanExpression;
	private final ArithmeticOperationElements pArithmeticOperation;
	private final LogicalOperationElements pLogicalOperation;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ThreeAddressCodeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTAC = new TACElements();
		this.pFunctionDef = new FunctionDefElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pFunctionParam = new FunctionParamElements();
		this.pFunctionArgument = new FunctionArgumentElements();
		this.pDataType = new DataTypeElements();
		this.pStruct = new StructElements();
		this.pGoto = new GotoElements();
		this.pLabel = new LabelElements();
		this.pIf = new IfElements();
		this.pAssignOperation = new AssignOperationElements();
		this.pFunction = new FunctionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pArithmeticOperation = new ArithmeticOperationElements();
		this.pLogicalOperation = new LogicalOperationElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.ensma.dsl.ThreeAddressCode".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TAC  returns TAC:
	//    tac += FunctionDef*
	//;
	public TACElements getTACAccess() {
		return pTAC;
	}
	
	public ParserRule getTACRule() {
		return getTACAccess().getRule();
	}
	
	//FunctionDef returns FunctionDef:
	//    {FunctionDef}
	//    function+=Function '(' (functionparam+=FunctionParam','?)* ')' '{'
	//        ((struct+=Struct ';') |
	//        label+=Label|
	//        goto+=Goto|
	//        if+=If|
	//        ('#' 'DEBUG' 'BEGIN_STMT')|
	//        (functionCall+=FunctionCall ';')|
	//        (assignOp+=AssignOperation ';') )*
	//        'return;'?
	//     '}'
	//;
	public FunctionDefElements getFunctionDefAccess() {
		return pFunctionDef;
	}
	
	public ParserRule getFunctionDefRule() {
		return getFunctionDefAccess().getRule();
	}
	
	//FunctionCall returns FunctionCall:
	//    {FunctionCall}
	//    functionCall+=[Function] '(' ( functionArgument+=FunctionArgument','?)* ')'
	//;
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//FunctionParam returns FunctionParam:
	//    {FunctionParam}
	//    struct+=Struct | (datatype=DataType '*'? name=ID)
	//;
	public FunctionParamElements getFunctionParamAccess() {
		return pFunctionParam;
	}
	
	public ParserRule getFunctionParamRule() {
		return getFunctionParamAccess().getRule();
	}
	
	//FunctionArgument returns FunctionArgument:
	//    {FunctionArgument}
	//    ('&'? ID) | INT
	//;
	public FunctionArgumentElements getFunctionArgumentAccess() {
		return pFunctionArgument;
	}
	
	public ParserRule getFunctionArgumentRule() {
		return getFunctionArgumentAccess().getRule();
	}
	
	//DataType returns DataType:
	//    {DataType}
	//    'float'|{DataType} 'int' | 'uint8_t'|'int16_t'
	//;
	public DataTypeElements getDataTypeAccess() {
		return pDataType;
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//Struct returns Struct:
	//    {Struct}
	//    'struct' ID '*'? ID
	//;
	public StructElements getStructAccess() {
		return pStruct;
	}
	
	public ParserRule getStructRule() {
		return getStructAccess().getRule();
	}
	
	//Goto returns Goto:
	//    {Goto}
	//    'goto' ID ';'
	//;
	public GotoElements getGotoAccess() {
		return pGoto;
	}
	
	public ParserRule getGotoRule() {
		return getGotoAccess().getRule();
	}
	
	//Label returns Label:
	//    {Label}
	//    '<'ID INT'>'':'
	//    ;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}
	
	//If returns If:
	//    'if' '(' BooleanExpression ')'
	//    ;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//AssignOperation returns AssignOperation:
	//    {AssignOperation}
	//    ID  ('.' ID) ? '=' (ID|STRING|INT|('&'ID '->' ID) |'{CLOBBER}'|functionCall+=FunctionCall)
	//;
	public AssignOperationElements getAssignOperationAccess() {
		return pAssignOperation;
	}
	
	public ParserRule getAssignOperationRule() {
		return getAssignOperationAccess().getRule();
	}
	
	//Function returns Function:
	//    {Function}
	//    name=ID;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//BooleanExpression returns BouleanExrpession:
	//    ID LogicalOperation INT| ID;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//ArithmeticOperation returns ArithmeticOperation:
	//    '+' | '-' | '*' | '/' ;
	public ArithmeticOperationElements getArithmeticOperationAccess() {
		return pArithmeticOperation;
	}
	
	public ParserRule getArithmeticOperationRule() {
		return getArithmeticOperationAccess().getRule();
	}
	
	//LogicalOperation returns LogicalOperation:
	//    'and' | 'or' | '=<' | '<' | '>' | '=>' | '==' | '!=';
	public LogicalOperationElements getLogicalOperationAccess() {
		return pLogicalOperation;
	}
	
	public ParserRule getLogicalOperationRule() {
		return getLogicalOperationAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
